package edu.uga.cs.project4_geography_quiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.List;

public class GeoQuizData {

    private SQLiteDatabase db;
    private SQLiteOpenHelper geoQuizDbHelper;
    private static final String[] allColumns = {
            GeoQuizDBHelper.GEOQUIZ_COLUMN_ID,
            GeoQuizDBHelper.GEOQUIZ_COLUMN_COUNTRY,
            GeoQuizDBHelper.GEOQUIZ_COLUMN_CONTINENT
    };

    public GeoQuizData(Context context) {
        this.geoQuizDbHelper = GeoQuizDBHelper.getInstance(context);
    }

    //open database
    public void open() {
        db = geoQuizDbHelper.getWritableDatabase();
    }

    //close database
    public void close() {
        if(geoQuizDbHelper != null) {
            geoQuizDbHelper.close();
        }
    }

    //retrieves all countries and returns them as a list
    public List<Country> retrieveCountries() {
        ArrayList<Country> countries = new ArrayList<>();
        Cursor cursor = null;

        try {
            // Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query( GeoQuizDBHelper.TABLE_GEOQUIZ, allColumns,
                    null, null, null, null, null );

            // collect all job leads into a List
            if( cursor.getCount() > 0 ) {
                while( cursor.moveToNext() ) {
                    // get all attribute values of this job lead
                    long id = cursor.getLong(cursor.getColumnIndex(GeoQuizDBHelper.GEOQUIZ_COLUMN_ID));
                    String country = cursor.getString(cursor.getColumnIndex(GeoQuizDBHelper.GEOQUIZ_COLUMN_COUNTRY));
                    String continent = cursor.getString(cursor.getColumnIndex(GeoQuizDBHelper.GEOQUIZ_COLUMN_CONTINENT));

                    // create a new Country object and set its state to the retrieved values
                    Country countryObj = new Country(country, continent);
                    countryObj.setId(id); // set the id (the primary key) of this object
                    // add it to the list
                    countries.add(countryObj);
                }
            }
        }
        catch( Exception e ){
        }
        finally{
            // we should close the cursor
            if (cursor != null) {
                cursor.close();
            }
        }
        // return a list of retrieved job leads
        return countries;
    }

    // Store a new job lead in the database.
    public Country storeCountry(Country country) {

        // Prepare the values for all of the necessary columns in the table
        // and set their values to the variables of the Country argument.
        // This is how we are providing persistence to a Country (Java object) instance
        // by storing it as a new row in the database table representing countries.
        ContentValues values = new ContentValues();
        values.put(GeoQuizDBHelper.GEOQUIZ_COLUMN_COUNTRY, country.getCountryName());
        values.put(GeoQuizDBHelper.GEOQUIZ_COLUMN_CONTINENT, country.getContinent());

        // Insert the new row into the database table;
        // The id (primary key) is automatically generated by the database system
        // and returned as from the insert method call.
        long id = db.insert(GeoQuizDBHelper.TABLE_GEOQUIZ, null, values );

        // store the id (the primary key) in the JobLead instance, as it is now persistent
        country.setId( id );

        return country;
    }


}
